// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// 1.model ✅ -> 2.database ✅ -> 3.mutation ✅ -> 4.useSWR ✅

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int             @id @default(autoincrement())
  name            String
  phone           String?         @unique
  email           String?         @unique
  avatar          String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  tokens          Token[]
  products        Product[]
  favs            Fav[]
  Post            Post[]
  answers         Answer[]
  curiosities     Curiosity[]
  writtenReviews  Review[]        @relation(name: "writtenReviews")
  receivedReviews Review[]        @relation(name: "receivedReviews")
  sales           Sale[]
  purchases       Purchase[]
  records         Record[]
  streams         Stream[]
  streamMessages  StreamMessage[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  records     Record[]

  @@index([userId])
}

model Post {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  question    String      @db.MediumText
  answers     Answer[]
  curiosities Curiosity[]
  latitude    Float?
  longitude   Float?

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  answer    String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Curiosity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int

  @@index([userId])
  @@index([postId])
}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  rate         Int

  @@index([createdById])
  @@index([createdForId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@index([userId])
  @@index([productId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@index([userId])
  @@index([productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@index([userId])
  @@index([productId])
}

model Record {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  kind      Kind

  @@index([userId])
  @@index([productId])
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  description    String          @db.MediumText
  price          Int
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  StreamMessages StreamMessage[]

  @@index([userId])
}

model StreamMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   @db.MediumText
  Stream    Stream   @relation(fields: [StreamId], references: [id], onDelete: Cascade)
  StreamId  Int

  @@index([userId])
  @@index([StreamId])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// 1.model ✅ -> 2.database ✅ -> 3.mutation ✅ -> 4.useSWR ✅

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int         @id @default(autoincrement())
  name        String
  phone       String?     @unique
  email       String?     @unique
  avatar      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tokens      Token[]
  products    Product[]
  favs        Fav[]
  Post        Post[]
  answers     Answer[]
  curiosities Curiosity[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  image       String
  name        String
  price       Int
  description String   @db.MediumText
  favs        Fav[]

  @@index([userId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@index([userId])
  @@index([productId])
}

model Post {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  question    String      @db.MediumText
  answers     Answer[]
  curiosities Curiosity[]
  latitude    Float?
  longitude   Float?

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  answer    String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Curiosity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int

  @@index([userId])
  @@index([postId])
}
